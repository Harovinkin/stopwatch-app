{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["START","STOP","click$","Subject","doubleClick$","pipe","buffer","debounceTime","map","list","length","filter","x","action$","stop$","action","start$","countUp$","interval","takeUntil","repeatWhen","App","useState","counter","setCounter","startActive","setStartActive","useEffect","sub","subscribe","val","prev","next","unsubscribe","className","Date","toISOString","slice","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAIMA,EAAQ,QACRC,EAAM,OAGNC,EAAS,IAAIC,IAEbC,EAAeF,EAAOG,KAC1BC,YACEJ,EAAOG,KAAKE,YAAa,OAE3BC,aAAI,SAAAC,GACF,OAAOA,EAAKC,UAEdC,aAAO,SAAAC,GAAC,OAAU,IAANA,MAGRC,EAAU,IAAIV,IAEdW,EAAQD,EAAQR,KAAKM,aAAO,SAAAI,GAAM,OAAIA,IAAWd,MACjDe,EAASH,EAAQR,KAAKM,aAAO,SAAAI,GAAM,OAAIA,IAAWf,MAElDiB,EAAWC,YAAS,KAAMb,KAChCc,YAAUL,GACVK,YAAUf,GACVgB,aAAW,kBAAMJ,MAIF,SAASK,IACxB,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACR,IAAMC,EAAMX,EAASY,WAAU,SAAAC,GAAG,OAAIN,GAAW,SAAAO,GAAI,OAAIA,EAAO,UAGhE,OAFAlB,EAAQmB,KAAK/B,GAEN,kBAAM2B,EAAIK,iBAChB,IAwBH,OACE,sBAAKC,UAAU,YAAf,UACE,6BAAK,IAAIC,KAAKZ,GAASa,cAAcC,MAAM,GAAI,MAC/C,sBAAKH,UAAU,cAAf,UACCT,EACI,wBAAQS,UAAU,QAAQI,QA3Bf,WAClBzB,EAAQmB,KAAKhC,GACb0B,GAAe,SAAAK,GAAI,OAAKA,MAyBjB,mBACA,wBAAQG,UAAU,QAAQI,QAtBhB,WACjBzB,EAAQmB,KAAK/B,GACbuB,EAAW,GACXE,GAAe,SAAAK,GAAI,OAAKA,MAmBjB,kBAEL,wBAAQG,UAAU,OAAOI,QAlBV,WACjBlC,EAAa4B,OACbN,GAAe,IAgBb,kBACA,wBAAQQ,UAAU,QAAQI,QAdV,WAClBd,EAAW,IAaT,yBC1EJ,IAYee,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7B,EAAD,MAEF8B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0451a660.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { interval, Subject } from \"rxjs\";\r\nimport { takeUntil, map, filter, buffer, debounceTime, repeatWhen } from \"rxjs/operators\";\r\n\r\nconst START = 'start';\r\nconst STOP ='stop';\r\n\r\n\r\nconst click$ = new Subject();\r\n\r\nconst doubleClick$ = click$.pipe(\r\n  buffer(\r\n    click$.pipe(debounceTime(300))\r\n  ),\r\n  map(list => {\r\n    return list.length;\r\n  }),\r\n  filter(x => x === 2),\r\n)\r\n\r\nconst action$ = new Subject();\r\n\r\nconst stop$ = action$.pipe(filter(action => action === STOP));\r\nconst start$ = action$.pipe(filter(action => action === START));\r\n\r\nconst countUp$ = interval(1000).pipe(\r\ntakeUntil(stop$),\r\ntakeUntil(doubleClick$),\r\nrepeatWhen(() => start$),\r\n)\r\n\r\n\r\nexport default function App() {\r\nconst [counter, setCounter] = useState(0);\r\nconst [startActive, setStartActive] = useState(true);\r\n\r\nuseEffect(() => {\r\n  const sub = countUp$.subscribe(val => setCounter(prev => prev + 1000));\r\n  action$.next(STOP);\r\n\r\n  return () => sub.unsubscribe()\r\n}, [])\r\n\r\nconst handleStart = () => {\r\n  action$.next(START);\r\n  setStartActive(prev => !prev)\r\n}\r\n\r\n\r\nconst handleStop = () => {\r\n  action$.next(STOP);\r\n  setCounter(0)\r\n  setStartActive(prev => !prev)\r\n}\r\n\r\nconst handleWait = () => {\r\n  doubleClick$.next()\r\n  setStartActive(true)\r\n}\r\n\r\nconst handleReset = () => {\r\n  setCounter(0)\r\n}\r\n\r\n\r\nreturn (\r\n  <div className='container'>\r\n    <h1>{new Date(counter).toISOString().slice(11, 19)}</h1>\r\n    <div className='btn-wrapper'>\r\n    {startActive\r\n      ? (<button className='start' onClick={handleStart}>Start</button>)\r\n      : (<button className='stopt' onClick={handleStop}>Stop</button>)\r\n    }\r\n    <button className='wait' onClick={handleWait}>Wait</button>\r\n    <button className='reset' onClick={handleReset}>Reset</button>\r\n    </div>\r\n  </div>\r\n)\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}